package com.cmclinnovations.email;

import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_FROM_ADDRESS;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_SMTP_AUTH;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_SMTP_HOST;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_SMTP_PASS;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_SMTP_PORT;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_SSL_ENABLE;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_SUBJECT_PREFIX;
import static com.cmclinnovations.email.EmailAgentConfiguration.KEY_TO_ADDRESS;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class handles the connection to a specified SMTP server to send the requested email.
 *
 * @author Michael Hillman
 */
public class EmailHandler {

    /**
     * Error logging.
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(EmailHandler.class);

    /**
     * Prefix for email body
     */
    private static final String BODY_PREFIX = "<html>"
            + "What follows is an automated email generated by the <b>EmailAgent</b> agent on behalf of another KG service."
            + "<br>Please do not reply.<br><br><hr><br>";
            
    /**
     * Suffix for email body.
     */
    private static final String BODY_SUFFIX = "<br><br><hr><br></html>";

    /**
     * Attempts to send an email to the SMTP server specified in the properties.
     *
     * @param subject email subject
     * @param body email body
     *
     * @return JSONObject containing the result (to be sent as response)
     */
    static JSONObject submitEmail(String subject, String body) {

        // Load smtp properites
        Properties mailProps = new Properties();
        mailProps.put("mail.smtp.host", EmailAgentConfiguration.getProperty(KEY_SMTP_HOST));
        mailProps.put("mail.smtp.port", EmailAgentConfiguration.getProperty(KEY_SMTP_PORT));
        mailProps.put("mail.smtp.ssl.enable", EmailAgentConfiguration.getProperty(KEY_SSL_ENABLE));
        mailProps.put("mail.smtp.auth", EmailAgentConfiguration.getProperty(KEY_SMTP_AUTH));

        // Create authenticated session
        Session mailSession = Session.getDefaultInstance(mailProps, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(
                        EmailAgentConfiguration.getProperty(KEY_FROM_ADDRESS),
                        EmailAgentConfiguration.getProperty(KEY_SMTP_PASS)
                );
            }
        });
        mailSession.setDebug(true);

        // Configure email
        Message email = new MimeMessage(mailSession);

        try {
            // To Address 
            String toAddress = EmailAgentConfiguration.getProperty(KEY_TO_ADDRESS);
            String[] toAddresses = toAddress.split(",");
            for (String address : toAddresses) {
                email.addRecipient(RecipientType.TO, new InternetAddress(address));
            }

            // From Address
            String fromAddress = EmailAgentConfiguration.getProperty(KEY_FROM_ADDRESS);
            email.setFrom(new InternetAddress(fromAddress));

            // Subject
            String fullSubject = EmailAgentConfiguration.getProperty(KEY_SUBJECT_PREFIX);
            fullSubject += " - " + subject;
            email.setSubject(fullSubject);

            // Body
            String fullBody = BODY_PREFIX + body + BODY_SUFFIX;
            email.setContent(fullBody, "text/html");

        } catch (MessagingException | IllegalStateException exception) {
            LOGGER.error("Could not create email message.", exception);

            JSONObject response = new JSONObject();
            response.put("status", "500");
            response.put("description", "Could not construct email object, invalid properties?");
            return response;
        }

        // Send the email
        return sendEmail(email);
    }

    /**
     * Attempts to send the input email.
     *
     * @param email email to send.
     *
     * @return JSONObject with response to request.
     */
    private static JSONObject sendEmail(Message email) {
        try {
            Transport.send(email);

            JSONObject response = new JSONObject();
            response.put("status", "200");
            response.put("description", "Email sent successfully.");
            return response;

        } catch (MessagingException exception) {
            LOGGER.error("Could not send email message to SMTP server.", exception);

            JSONObject response = new JSONObject();
            response.put("status", "200");
            response.put("description", "Could not submit email (" + exception.getMessage() + ").");
            return response;
        }
    }
}
// End of class.
