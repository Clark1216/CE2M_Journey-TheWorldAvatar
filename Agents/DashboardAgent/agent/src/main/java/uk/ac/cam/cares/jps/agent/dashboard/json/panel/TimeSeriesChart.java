package uk.ac.cam.cares.jps.agent.dashboard.json.panel;

import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.List;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about time series chart syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
class TimeSeriesChart {
    private final String TITLE;
    private final String DESCRIPTION;
    private final String DATABASE_CONNECTION_ID;
    private final StringBuilder QUERY_SYNTAX = new StringBuilder();
    private final StringBuilder FIELD_COLUMN_MAPPING = new StringBuilder();

    /**
     * Standard Constructor.
     *
     * @param measure            The measure name for this variable.
     * @param assetType          The asset type for this measure.
     * @param unit               Optional measure unit symbol. Can be null.
     * @param databaseId         The database connection ID generated by Grafana.
     * @param timeSeriesMetadata A list of assets and their metadata for the specified measure.
     */
    public TimeSeriesChart(String measure, String assetType, String unit, String databaseId, List<String[]> timeSeriesMetadata) {
        // Assumes that each measure of a specific asset type belongs to only table
        String tableName = timeSeriesMetadata.get(0)[2];
        // Title is: Measure [Unit] of Asset Type
        String titleContent = StringHelper.addSpaceBetweenCapitalWords(measure) + " of " + StringHelper.addSpaceBetweenCapitalWords(assetType);
        // Unit is optional
        this.TITLE = unit.equals("null") ? titleContent : titleContent + " [" + unit + "]";
        // Description should follow the measure name and asset type
        this.DESCRIPTION = "A chart displaying the time series of " + measure.toLowerCase() + " for " + assetType.toLowerCase();
        this.DATABASE_CONNECTION_ID = databaseId;
        // Create the query syntax from the parameters
        this.QUERY_SYNTAX.append("SELECT time AS \\\"time\\\", ${")
                // Custom csv parameter must be lower case with no spacing ie: measurenameassetname
                .append(StringHelper.formatVariableName(measure)).append(StringHelper.formatVariableName(assetType)).append(":csv} ")
                .append("FROM \\\"").append(tableName).append("\\\" WHERE $__timeFilter(time)");
        for (String[] metadata : timeSeriesMetadata) {
            // Only append a comma at the start if it is not the first set
            if (this.FIELD_COLUMN_MAPPING.length() != 0) this.FIELD_COLUMN_MAPPING.append(", ");
            // Append in format of \"columnName\":\"assetName\"
            this.FIELD_COLUMN_MAPPING.append("\"").append(metadata[1]).append("\":\"").append(metadata[0]).append("\"");
        }
    }

    /**
     * Construct the Time Series Chart syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The Time Series Chart syntax as a String.
     */
    protected String construct(int height, int width, int xPosition, int yPosition) {
        StringBuilder builder = new StringBuilder();
        builder.append("{")
                // Generate a new ID for this panel
                .append("\"id\": null,")
                // Title of this panel
                .append("\"title\": \"").append(this.TITLE).append("\",")
                // Description for this panel
                .append("\"description\": \"").append(this.DESCRIPTION).append("\",")
                // Chart type must be set to time series
                .append("\"type\": \"timeseries\",")
                // Field Configuration
                .append("\"fieldConfig\": { ")
                // Default field configuration
                .append("\"defaults\": {\"color\": {\"mode\": \"palette-classic\"},")
                // Custom parts of field configurations
                .append("\"custom\":{").append("\"axisCenteredZero\":false,\"axisColorMode\":\"text\",")
                .append("\"axisLabel\":\"\",\"axisPlacement\":\"auto\", \"barAlignment\":0, \"drawStyle\":\"line\",")
                .append("\"fillOpacity\":0,\"gradientMode\":\"none\",")
                .append("\"hideFrom\":{\"legend\":false, \"tooltip\":false, \"viz\":false},")
                .append("\"lineInterpolation\":\"linear\", \"lineWidth\":1, \"pointSize\":5,")
                .append("\"scaleDistribution\":{\"type\":\"linear\"}, \"showPoints\":\"auto\", \"spanNulls\":false,")
                .append("\"stacking\":{\"group\":\"A\", \"mode\":\"none\"}, \"thresholdsStyle\":{\"mode\":\"off\"}")
                .append("},") // End of custom parts
                .append("\"mappings\": []")
                .append("},") // End of defaults
                .append("\"overrides\": []")
                .append("},") // End of field configuration
                // Grid position: Two panels of height:4 and width:6 will be found at (0,0), (6,4) coordinates
                // Height and width are dimensions of the panel
                .append("\"gridPos\":{\"h\":").append(height).append(",\"w\":").append(width)
                // x and y are the placement position within the dashboard/grid
                .append(",\"x\":").append(xPosition).append(",\"y\":").append(yPosition).append("},")
                // Options
                .append("\"options\":{")
                // Legend options
                .append("\"legend\":{\"calcs\": [], \"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true},")
                // Tooltip options
                .append("\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}")
                .append("},") // end of options
                // Postgres datasource
                .append("\"datasource\": {\"type\": \"postgres\", \"uid\": \"").append(this.DATABASE_CONNECTION_ID).append("\"},")
                // Targets the written queries with their configuration to execute and retrieve data
                .append("\"targets\": [{\"datasource\":{\"type\":\"postgres\",\"uid\":\"").append(this.DATABASE_CONNECTION_ID) // Ensure data source is postgres
                // Query configurations
                .append("\"}, \"editorMode\":\"code\",\"format\":\"table\",\"rawQuery\":true,\"refId\":\"A\",")
                .append("\"sql\":{\"columns\": [{\"parameters\": [],\"type\":\"function\"}], \"groupBy\": [{\"property\":{\"type\":\"string\"},\"type\":\"groupBy\"}],\"limit\":50},")
                // Query to be executed
                .append("\"rawSql\":\"").append(this.QUERY_SYNTAX).append("\"}],")
                // Rename fields from their columns to asset name
                .append("\"transformations\": [{ \"id\": \"organize\",")
                .append("\"options\": {\"renameByName\": {").append(this.FIELD_COLUMN_MAPPING).append("}}")
                .append("}]")
                .append("}");
        return builder.toString();
    }
}
