package com.cmclinnovations.prime.species.model.utils;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;
import org.slf4j.Logger;

import com.cmclinnovations.prime.species.model.converter.species.PrimeSpeciesConverter;
import com.cmclinnovations.prime.species.model.exception.OntoPrimeSpeciesException;

/**
 * A utility class that supports the following functionalities:<p>
 * 1. Helps convert a file system path to a URL.
 * In particular, it supports the following string conversion features:</p>
 * a) the replacement of each single space (' ') of a path with an underscore ('_').</br>
 * b) the replacement of each backslash with a front slash.</br>
 * c) the addition of the protocol 'file:/' at the beginning of a path.</br>
 * d) the extraction of an experiment's name from a file path.</br>
 * e) the formation of a URL, suitable to be used in an OWL file, by combining
 * a file path and name.</p>
 * 2. Splits a space separated string and put each split part as a key and
 * the in
 * a Hashmap and 
 * 
 * 
 * @author Jiaru Bai (jb2197@cam.ac.uk)
 *
 */
public class PrimeSpeciesConverterUtils extends PrimeSpeciesConverter {
	static Logger logger = org.slf4j.LoggerFactory.getLogger(PrimeSpeciesConverterUtils.class);
	/**
	 * Replaces each space character of a path
	 * with an underscore.
	 * 
	 * @param path a path that is being processed to get
	 * spaces replaced by underscores.
	 * 
	 * @return a URL generated by replacing spaces with underscores
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors
	 */
	public static String convertToURLString(String path) throws OntoPrimeSpeciesException {
		String urlString ="";
		if(path!=null){
			urlString = path.replace(' ', '_');
		} else{
			logger.error("The input path is null.");
			throw new OntoPrimeSpeciesException("A null input path has been provided.");
		}
		return urlString;
	}
	
	/**
	 * Replaces each backslash of a path with a front slash to
	 * make it suitable to be used as a URL.
	 * 
	 * @param path a path that is being converted to a URL
	 * @return a URL after replacing the backslashes with the front.
	 * slashes.
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors.
	 */
	public static String formatToURLSlash(String path) throws OntoPrimeSpeciesException {
		if(path==null){
			logger.error("The input path is null.");
			throw new OntoPrimeSpeciesException("A null input path has been provided.");
		}
		if(path.contains("\\")){
			path = path.replace("\\", "/");
		}
		return path;
	}
	
	/**
	 * Adds the protocol 'file:/' at the beginning of a file path
	 * to form a URL that can be used in an OWL file as a URL.
	 * 
	 * @param path an absolute file path that needs to be converted
	 * to a URL that can be used in an OWL file.
	 * @return an OWL file formatted URL.
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors.
	 */
	public static String addFileProtocol(String path) throws OntoPrimeSpeciesException {
		if(path==null){
			logger.error("The input path is null.");
			throw new OntoPrimeSpeciesException("A null input path has been provided.");
		}
		if(!path.contains("file:/")){
			path = "file:/"+path;
		}
		return path;
	}
	
	/**
	 * Forms a URL of a file based on the path where the file is stored plus
	 * the name of experiment, which is the name of the current PrIMe xml file.
	 * 
	 * @param primeFile The path to the PrIMe file being processed.
	 * @param owlFilePath The path to the file being processed.
	 * @return a string representing a URL.
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors.
	 */
	public static String formOwlUrl(String primeFile, String experimentABoxFilePath) throws OntoPrimeSpeciesException {
		if (primeFile == null) {
			logger.error("Provided primeFile path is null.");
			throw new OntoPrimeSpeciesException("Provided primeFile path is null.");
		}
		if (experimentABoxFilePath == null) {
			logger.error("Provided file path is null.");
			throw new OntoPrimeSpeciesException("Provided file path is null.");
		}
		experimentABoxFilePath = ontoPrimeSpeciesKB.getOntoSpeciesKbURL();
		experimentABoxFilePath = ontoPrimeSpeciesKB.getOntoSpeciesKbURL()
				.concat(extractChemicalSpeciesName(primeFile)).concat(opCtrl.getOwlFileExtension());
		experimentABoxFilePath = formatToURLSlash(experimentABoxFilePath);
		return experimentABoxFilePath;
	}
	
	/**
	 * Forms a URL of a file based on the path where the file is stored plus
	 * the name of experiment, which is the name of the current PrIMe xml file.
	 * 
	 * @param primeFile The path to the PrIMe file being processed.
	 * @param owlFilePath The path to the file being processed.
	 * @return a string representing a URL.
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors.
	 */
	public static String formOwlFileSaveUrl(String primeFile, String owlFilePath) throws OntoPrimeSpeciesException {
		if (primeFile == null) {
			logger.error("Provided primeFile path is null.");
			throw new OntoPrimeSpeciesException("Provided primeFile path is null.");
		}
		if (owlFilePath == null) {
			logger.error("Provided file path is null.");
			throw new OntoPrimeSpeciesException("Provided file path is null.");
		}
		owlFilePath = owlFilePath.concat("/").concat(ontoPrimeSpeciesKB.getOntoSpeciesKbRootDirectory())
				.concat(extractChemicalSpeciesName(primeFile)).concat(opCtrl.getOwlFileExtension());
		owlFilePath = formatToURLSlash(owlFilePath);
		owlFilePath = addFileProtocol(owlFilePath);
		return owlFilePath;
	}

	
	/**
	 * Forms the base URL for an OWL ontology.
	 * 
	 * @param primeFile The path to the PrIMe file being processed.
	 * @return a string representing the base URL.
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors.
	 */
	public static String formBaseURL(String primeFile) throws OntoPrimeSpeciesException {
		if (primeFile == null) {
			logger.error("Provided primeFile path is null.");
			throw new OntoPrimeSpeciesException("Provided primeFile path is null.");
		}
		return ontoPrimeSpeciesKB.getOntoSpeciesKbURL()
				.concat(extractChemicalSpeciesName(primeFile)).concat(opCtrl.getOwlFileExtension());
	}
	
	/**
	 * Forms an OWL formatted URL of a file based on the path where the file is stored plus
	 * the name of the file.
	 * 
	 * @param owlFilePath The path to the file being processed
	 * @return a string representing a URL
	 * @throws OntoChemExpException a specialised exception designed to deal with
	 * prime to ontology generation related errors
	 */
	public static String formOwlUrl(String owlFilePath) throws OntoPrimeSpeciesException {
		if (owlFilePath == null) {
			logger.error("Provided owlFilePath path is null.");
			throw new OntoPrimeSpeciesException("Provided owlFilePath path is null.");
		}
		owlFilePath = formatToURLSlash(owlFilePath);
		owlFilePath = addFileProtocol(owlFilePath);
		return owlFilePath;
	}
	
	/**
	 * Extracts the name of the experiment being processed from the 
	 * primeFile path.
	 * 
	 * @param primeFile The primeFile path.
	 * @return String returns a string that is the name of the current experiment
	 * being processed.
	 * @throws OntoChemExpException
	 */
	public static String extractChemicalSpeciesName(String primeFile) throws OntoPrimeSpeciesException {
		if(chemicalSpeciesName!=null && !chemicalSpeciesName.isEmpty()){
			return chemicalSpeciesName;
		}
		if (!primeFile.contains(FRONTSLASH)) {
			logger.error("Unexpected primeFile path.");
			throw new OntoPrimeSpeciesException("Unexpected primeFile path.");
		}
		if(primeFile.endsWith(".xml")){
			primeFile = primeFile.substring(0, primeFile.lastIndexOf(".xml"));
		}
		String tokens[] = primeFile.split(FRONTSLASH.concat(FRONTSLASH));
		if(tokens.length<2){
			logger.error("The primeFile path is unexpectedly short.");
			throw new OntoPrimeSpeciesException("The primeFile path is unexpectedly short.");
		}
		System.out.println(tokens[tokens.length-1]);
		return tokens[tokens.length-1];
	}

	/**
	 * Checks if the current ontology contains an IRI. If an IRI is available
	 * it is returned, otherwise the OntoException exception is thrown.
	 * 
	 * @param ontology
	 * @return IRI the IRI of the input ontology 
	 * @throws OntoChemExpException
	 */
	public static IRI readOntologyIRI(OWLOntology ontology) throws OntoPrimeSpeciesException{
		if(ontology.getOntologyID().getOntologyIRI().isPresent()){
			return ontology.getOntologyID().getOntologyIRI().get();
		} else{
			logger.error("The OWL file does not contain an IRI.");
			throw new OntoPrimeSpeciesException("The OWL file does not contain an IRI.");
		}
	}
	
	/**
	 * Creates and returns an instance of the BufferedReader class.
	 * It takes the absolute file path including the file name as input.
	 * 
	 * @param filePathPlusName
	 *            the path plus name of the file being read
	 * @return
	 * @throws IOException
	 */
	public static BufferedReader openSourceFile(String filePathPlusName)
			throws IOException {
		return new BufferedReader(new InputStreamReader(new FileInputStream(
				filePathPlusName), "UTF-8"));
	}
}
