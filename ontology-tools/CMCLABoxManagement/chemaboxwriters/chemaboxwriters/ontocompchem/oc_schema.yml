prefixes:
    base_import: "http://www.w3.org/2002/07/owl#imports"
    onto_spec: "http://www.theworldavatar.com/ontology/ontospecies/OntoSpecies.owl"
    spec_pref_no_slash: "http://www.theworldavatar.com/kb/ontospecies"
    rdfs: "http://www.w3.org/2000/01/rdf-schema"
    skos: "http://www.w3.org/2004/02/skos/core"
    dc: "http://purl.org/dc/elements/1.1/"
    table_pref: "http://www.daml.org/2003/01/periodictable/PeriodicTable.owl"

    spec_pref: "http://www.theworldavatar.com/kb/ontospecies/"
    gain_pref: "http://purl.org/gc/"
    unit_pref: "http://data.nasa.gov/qudt/owl/"

    onto_comp: "http://www.theworldavatar.com/ontology/ontocompchem/ontocompchem.owl"
    comp_pref_no_slash: "http://www.theworldavatar.com/kb/ontocompchem"
    comp_pref: "http://www.theworldavatar.com/kb/ontocompchem/"

#
schema_to_json_vars:
    ENTRY_IRI: {'required': True, 'jsonKey': 'EntryIRI'}
    ENTRY_ID: {'required': True, 'jsonKey': 'EntryUUID'}
    EMP_FORMULA: {'required': True, 'jsonKey': 'Empirical formula'}
    ATOM_TYPES: {'required': True, 'jsonKey': 'Atom types'}
    GEOMETRY: {'required': True, 'jsonKey': 'Geometry'}
    SPIN_MULT: {'required': True, 'jsonKey': 'Spin multiplicity'}
    MOL_WEIGHT: {'required': True, 'jsonKey': 'MolecularWeight'}
    ATOM_MASSES: {'required': True, 'jsonKey': 'Atomic masses'}
    FORM_CHARGE: {'required': True, 'jsonKey': 'Formal charge'}
    SPECIES_IRI: {'required': True, 'jsonKey': 'SpeciesIRI'}
    LVL_OF_THEORY: {'required': True, 'jsonKey': 'Method'}
    BASIS_SET: {'required': True, 'jsonKey': 'Basis set'}
    PROGRAM_NAME: {'required': True, 'jsonKey': 'Program name'}
    PROGRAM_VERSION: {'required': True, 'jsonKey': 'Program version'}
    RUN_DATE: {'required': True, 'jsonKey': 'Run date'}
    CCLOG_SOURCE_LOCATION: {'required': True, 'jsonKey': 'cclog_source_location'}
    PNG_SOURCE_LOCATION: {'required': True, 'jsonKey': 'png_source_location'}
    XML_SOURCE_LOCATION: {'required': True, 'jsonKey': 'xml_source_location'}


    FREQ_STRING: {'required': True, 'jsonKey': 'Frequencies_String'}
    FREQ_NR: {'required': True, 'jsonKey': 'Frequencies number'}
    ROT_CONST_STRING: {'required': True, 'jsonKey': 'Rotational_Constants_String'}
    ROT_CONST_NR: {'required': True, 'jsonKey': 'Rotational constants number'}
    ROT_CONST_SYM_NR: {'required': True, 'jsonKey': 'Rotational symmetry number'}
    GEOM_TYPE: {'required': True, 'jsonKey': 'Geometry type'}
    ZPE_ENERGY: {'required': True, 'jsonKey': 'Zero_Point_Energy'}
    ELEC_AND_ZPE_ENERGY: {'required': True, 'jsonKey': 'Electronic and ZPE energy'}
    ELEC_ENERGY: {'required': True, 'jsonKey': 'Electronic energy'}
    HOMO_ENERGY: {'required': True, 'jsonKey': 'HOMO energy'}
    HOMO_MIN1_ENERGY: {'required': True, 'jsonKey': 'HOMO-1 energy'}
    HOMO_MIN2_ENERGY: {'required': True, 'jsonKey': 'HOMO-2 energy'}
    LUMO_ENERGY: {'required': True, 'jsonKey': 'LUMO energy'}
    LUMO_ADD1_ENERGY: {'required': True, 'jsonKey': 'LUMO+1 energy'}
    LUMO_ADD2_ENERGY: {'required': True, 'jsonKey': 'LUMO+2 energy'}


    ATOMS_LIST: {'required': True, 'jsonKey': 'AtomsList'}
    ATOMS_COUNTS: {'required': True, 'jsonKey': 'AtomsCounts'}
    ATOMS_INDICES: {'required': True, 'jsonKey': 'AtomsIndices'}
    UNIQUE_ATOMS: {'required': True, 'jsonKey': 'Unique_Atoms'}
    TOTAL_ATOMS_COUNTS: {'required': True, 'jsonKey': 'Total_Atom_Counts'}

    COORD_X: {'required': True, 'jsonKey': 'CoordinateX'}
    COORD_Y: {'required': True, 'jsonKey': 'CoordinateY'}
    COORD_Z: {'required': True, 'jsonKey': 'CoordinateZ'}
abox_schema:
    - # imports
        [
            '<IMP> ABoxOntoCompChem base_import: onto_comp:',
            '<IMP> ABoxOntoCompChem base comp_pref_no_slash:',
        ]
    - # main instance
        [
            '<INS> comp_pref:${ENTRY_IRI} rdf:type onto_comp:#G09',
        ]
    - # Ontosepecies link
        [
            '<INS> ${SPECIES_IRI} rdf:type onto_spec:#Species',
            '<OBJ> comp_pref:${ENTRY_IRI} onto_comp:#hasUniqueSpecies ${SPECIES_IRI}',
        ]
    - # Init
        [
            '<INS> comp_pref:InitializationModule_${ENTRY_ID} rdf:type onto_comp:#InitializationModule',
            '<OBJ> comp_pref:${ENTRY_IRI} onto_comp:#hasInitialization comp_pref:InitializationModule_${ENTRY_ID}',
            '<INS> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule rdf:type gain_pref:SourcePackage',
            '<OBJ> comp_pref:${ENTRY_IRI} onto_comp:#hasEnvironment comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule',
            '<INS> comp_pref:MoleculeProperty_${ENTRY_ID} rdf:type gain_pref:MoleculeProperty',
            '<OBJ> comp_pref:InitializationModule_${ENTRY_ID} gain_pref:hasMoleculeProperty comp_pref:MoleculeProperty_${ENTRY_ID}',
        ]
    - # Molecule / atom entries
        [
            '<INS> comp_pref:Molecule_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS} rdf:type gain_pref:Molecule',
            '<OBJ> comp_pref:MoleculeProperty_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS} gain_pref:hasMolecule comp_pref:Molecule_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS}',
            '<INS> comp_pref:Atom_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS} rdf:type gain_pref:Atom',
            '<OBJ> comp_pref:Molecule_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS} gain_pref:hasAtom comp_pref:Atom_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS}',
            '<INS> table_pref:#${UNIQUE_ATOMS} rdf:type table_pref:#Element',
            '<OBJ> comp_pref:Atom_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS} gain_pref:isElement table_pref:#${UNIQUE_ATOMS}',
            '<DAT> comp_pref:Atom_${ENTRY_ID}_${UNIQUE_ATOMS}${TOTAL_ATOMS_COUNTS} gain_pref:hasNumberOfAtoms ${TOTAL_ATOMS_COUNTS} Integer',
        ]
    - # Lvl of theory
        [
            '<INS> comp_pref:LevelOfTheory_${ENTRY_ID} rdf:type onto_comp:#LevelOfTheory',
            '<INS> comp_pref:MethodologyFeature_${ENTRY_ID}_LevelofTheoryParameter rdf:type gain_pref:MethodologyFeature',
            '<OBJ> comp_pref:InitializationModule_${ENTRY_ID} gain_pref:hasParameter comp_pref:MethodologyFeature_${ENTRY_ID}_LevelofTheoryParameter',
            '<DAT> comp_pref:MethodologyFeature_${ENTRY_ID}_LevelofTheoryParameter onto_comp:#hasLevelOfTheory "${LVL_OF_THEORY}"',

            '<INS> comp_pref:BasisSet_${ENTRY_ID} rdf:type gain_pref:BasisSet',
            '<OBJ> comp_pref:InitializationModule_${ENTRY_ID} gain_pref:hasParameter comp_pref:BasisSet_${ENTRY_ID}',
            "<DAT> comp_pref:BasisSet_${ENTRY_ID} gain_pref:hasBasisSet \"\"\"${BASIS_SET}\"\"",
        ]
    - # Emp Formula
        [
            '<DAT> comp_pref:MoleculeProperty_${ENTRY_ID} gain_pref:hasName ${EMP_FORMULA}',
        ]
    - # Freq string
        [
            '<INS> comp_pref:VibrationalAnalysis_${ENTRY_ID} rdf:type gain_pref:VibrationalAnalysis',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:VibrationalAnalysis_${ENTRY_ID}',
            '<INS> comp_pref:Frequency_${ENTRY_ID} rdf:type gain_pref:Frequency',
            '<OBJ> comp_pref:VibrationalAnalysis_${ENTRY_ID} gain_pref:hasResult comp_pref:Frequency_${ENTRY_ID}',
            '<DAT> comp_pref:Frequency_${ENTRY_ID} onto_comp:#hasFrequencies "${FREQ_STRING}"',
            '<DAT> comp_pref:Frequency_${ENTRY_ID} gain_pref:hasVibrationCount ${FREQ_NR}',
            '<INS> gain_pref:cm-1 rdf:type unit_pref:qudt#FrequencyUnit',
            '<OBJ> comp_pref:Frequency_${ENTRY_ID} gain_pref:hasUnit gain_pref:cm-1',
        ]
    - # Rotational data
        [
            '<INS> comp_pref:RotationalConstants_${ENTRY_ID} rdf:type onto_comp:#RotationalConstants',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:RotationalConstants_${ENTRY_ID}',
            '<DAT> comp_pref:RotationalConstants_${ENTRY_ID} onto_comp:#hasRotationalConstants "${ROT_CONST_STRING}" String',
            '<DAT> comp_pref:RotationalConstants_${ENTRY_ID} onto_comp:#hasRotationalConstantsCount ${ROT_CONST_NR}',
            '<OBJ> comp_pref:RotationalConstants_${ENTRY_ID} gain_pref:hasUnit unit_pref:unit#GigaHertz',
        ]
    - # Rotational sym nr
        [
            '<INS> comp_pref:RotationalSymmetry_${ENTRY_ID} rdf:type onto_comp:#RotationalSymmetry',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:RotationalSymmetry_${ENTRY_ID}',
            '<DAT> comp_pref:RotationalSymmetry_${ENTRY_ID} onto_comp:#hasRotationalSymmetryNumber ${ROT_CONST_SYM_NR}',
        ]
    - # Geom type
        [
            '<INS> comp_pref:GeometryType_${ENTRY_ID} rdf:type onto_comp:#GeometryType',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:GeometryType_${ENTRY_ID}',
            '<DAT> comp_pref:GeometryType_${ENTRY_ID} onto_comp:#hasGeometryType ${GEOM_TYPE}',
        ]
    - # ZPE
        [
            '<INS> comp_pref:ZeroPointEnergy_${ENTRY_ID} rdf:type onto_comp:#ZeroPointEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:ZeroPointEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_ZeroPointEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:ZeroPointEnergy_${ENTRY_ID} gain_pref:hasElectronicEnergy comp_pref:FloatValue_${ENTRY_ID}_ZeroPointEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_ZeroPointEnergy gain_pref:hasValue ${ZPE_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_ZeroPointEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # Elec and ZPE
        [
            '<INS> comp_pref:ElectronicAndZPEEnergy_${ENTRY_ID} rdf:type onto_comp:#ElectronicAndZPEEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:ElectronicAndZPEEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_ElectronicAndZPEEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:ElectronicAndZPEEnergy_${ENTRY_ID} gain_pref:hasElectronicEnergy comp_pref:FloatValue_${ENTRY_ID}_ElectronicAndZPEEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_ElectronicAndZPEEnergy gain_pref:hasValue ${ELEC_AND_ZPE_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_ElectronicAndZPEEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # Elec energy only
        [
            '<INS> comp_pref:ScfEnergy_${ENTRY_ID} rdf:type onto_comp:#ScfEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:ScfEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_ScfEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:ScfEnergy_${ENTRY_ID} gain_pref:hasElectronicEnergy comp_pref:FloatValue_${ENTRY_ID}_ScfEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_ScfEnergy gain_pref:hasValue ${ELEC_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_ScfEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # HOMO energy
        [
            '<INS> comp_pref:HomoEnergy_${ENTRY_ID} rdf:type onto_comp:#HomoEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:HomoEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_HomoEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:HomoEnergy_${ENTRY_ID} onto_comp:#hasHomoEnergy comp_pref:FloatValue_${ENTRY_ID}_HomoEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_HomoEnergy gain_pref:hasValue ${HOMO_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_HomoEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # HOMO-1 energy
        [
            '<INS> comp_pref:HomoMinusOneEnergy_${ENTRY_ID} rdf:type onto_comp:#HomoMinusOneEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:HomoMinusOneEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_HomoMinusOneEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:HomoMinusOneEnergy_${ENTRY_ID} onto_comp:#hasHomoMinusOneEnergy comp_pref:FloatValue_${ENTRY_ID}_HomoMinusOneEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_HomoMinusOneEnergy gain_pref:hasValue ${HOMO_MIN1_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_HomoMinusOneEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # HOMO-2 energy
        [
            '<INS> comp_pref:HomoMinusTwoEnergy_${ENTRY_ID} rdf:type onto_comp:#HomoMinusTwoEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:HomoMinusTwoEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_HomoMinusTwoEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:HomoMinusTwoEnergy_${ENTRY_ID} onto_comp:#hasHomoMinusTwoEnergy comp_pref:FloatValue_${ENTRY_ID}_HomoMinusTwoEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_HomoMinusTwoEnergy gain_pref:hasValue ${HOMO_MIN2_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_HomoMinusTwoEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # LUMO energy
        [
            '<INS> comp_pref:LumoEnergy_${ENTRY_ID} rdf:type onto_comp:#LumoEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:LumoEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_LumoEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:LumoEnergy_${ENTRY_ID} onto_comp:#hasLumoEnergy comp_pref:FloatValue_${ENTRY_ID}_LumoEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_LumoEnergy gain_pref:hasValue ${LUMO_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_LumoEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # LUMO+1 energy
        [
            '<INS> comp_pref:LumoPlusOneEnergy_${ENTRY_ID} rdf:type onto_comp:#LumoPlusOneEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:LumoPlusOneEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_LumoPlusOneEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:LumoPlusOneEnergy_${ENTRY_ID} onto_comp:#hasLumoPlusOneEnergy comp_pref:FloatValue_${ENTRY_ID}_LumoPlusOneEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_LumoPlusOneEnergy gain_pref:hasValue ${LUMO_ADD1_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_LumoPlusOneEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # LUMO+2 energy
        [
            '<INS> comp_pref:LumoPlusTwoEnergy_${ENTRY_ID} rdf:type onto_comp:#LumoPlusTwoEnergy',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:LumoPlusTwoEnergy_${ENTRY_ID}',
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_LumoPlusTwoEnergy rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:LumoPlusTwoEnergy_${ENTRY_ID} onto_comp:#hasLumoPlusTwoEnergy comp_pref:FloatValue_${ENTRY_ID}_LumoPlusTwoEnergy',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_LumoPlusTwoEnergy gain_pref:hasValue ${LUMO_ADD2_ENERGY}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_LumoPlusTwoEnergy gain_pref:hasUnit unit_pref:unit#Hartree',
        ]
    - # Main Molulecule entry that would hold spin mult, charge and other props
        [
            '<INS> comp_pref:GeometryOptimization_${ENTRY_ID} rdf:type gain_pref:GeometryOptimization',
            '<OBJ> comp_pref:${ENTRY_IRI} gain_pref:isCalculationOn comp_pref:GeometryOptimization_${ENTRY_ID}',
            '<INS> comp_pref:Molecule_${ENTRY_ID} rdf:type gain_pref:Molecule',
            '<OBJ> comp_pref:GeometryOptimization_${ENTRY_ID} gain_pref:hasMolecule comp_pref:Molecule_${ENTRY_ID}',
        ]
    - # Spin mult
        [
            '<DAT> comp_pref:Molecule_${ENTRY_ID} onto_comp:#hasSpinMultiplicity ${SPIN_MULT}',
        ]
    - # Formal Charge
        [
            '<INS> comp_pref:IntegerValue_${ENTRY_ID}_FormalCharge rdf:type gain_pref:IntegerValue',
            '<OBJ> comp_pref:Molecule_${ENTRY_ID} gain_pref:hasFormalCharge comp_pref:IntegerValue_${ENTRY_ID}_FormalCharge',
            '<DAT> comp_pref:IntegerValue_${ENTRY_ID}_FormalCharge gain_pref:hasValue ${FORM_CHARGE} Integer',
            '<OBJ> comp_pref:IntegerValue_${ENTRY_ID}_FormalCharge gain_pref:hasUnit gain_pref:atomicUnit',
        ]
    - # Atom types
        [
            '<INS> comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i} rdf:type gain_pref:Atom',
            '<OBJ> comp_pref:Molecule_${ENTRY_ID} gain_pref:hasAtom comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i}',
            '<OBJ> comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i} gain_pref:isElement table_pref:#${ATOM_TYPES}',
        ]
    - # Atom xyz coords
        [
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_x3Coordinate rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i} gain_pref:hasAtomCoordinateX comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_x3Coordinate',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_x3Coordinate gain_pref:hasValue ${COORD_X}',

            '<INS> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_y3Coordinate rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i} gain_pref:hasAtomCoordinateY comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_y3Coordinate',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_y3Coordinate gain_pref:hasValue ${COORD_Y}',

            '<INS> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_z3Coordinate rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i} gain_pref:hasAtomCoordinateZ comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_z3Coordinate',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_z3Coordinate gain_pref:hasValue ${COORD_Z}',
        ]
    - # Atom mass
        [
            '<INS> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_Mass rdf:type gain_pref:FloatValue',
            '<OBJ> comp_pref:Atom_${ENTRY_ID}_${ATOM_TYPES}%{i} gain_pref:hasMass comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_Mass',
            '<DAT> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_Mass gain_pref:hasValue ${ATOM_MASSES}',
            '<OBJ> comp_pref:FloatValue_${ENTRY_ID}_${ATOM_TYPES}%{i}_Mass gain_pref:hasUnit unit_pref:unit#Dalton',
        ]
    - # Program name
        [
            '<DAT> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule onto_comp:#hasProgram ${PROGRAM_NAME}',
        ]
    - # Program version
        [
            '<DAT> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule onto_comp:#hasProgramVersion ${PROGRAM_VERSION}',
        ]
    - # Run date
        [
            '<DAT> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule onto_comp:#hasRunDate "${RUN_DATE}"',
        ]
    - # cclog location
        [
            '<OBJ> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule onto_comp:#hasOutputFile ${CCLOG_SOURCE_LOCATION}',
        ]
    - # png location
        [
            '<OBJ> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule onto_comp:#hasOutputFile ${PNG_SOURCE_LOCATION}',
        ]
    - # xml location
        [
            '<OBJ> comp_pref:SourcePackage_${ENTRY_ID}_EnvironmentModule onto_comp:#hasOutputFile ${XML_SOURCE_LOCATION}',
        ]