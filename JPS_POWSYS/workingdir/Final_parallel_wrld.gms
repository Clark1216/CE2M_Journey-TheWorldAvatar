Sets
* i represent the generation source (nuclear or CCGT)
i generation source
*The constant parameters
j parameter
*t represents the time horizion (1 hour interval for a period of 1 year)
t time
ls The column labels for gemerator para
lp The column labels for time profiles ;


Parameters
*The array for all the generator parameters
gp(i,ls)
*The array for all the other parameters and constants
cp(j)
*The array for the time series data
tp(t,lp)


a(i)
*Annualised cost of decommissioning asset
d(i)
*Transmission cost
*delta
*Import constraint
*TRM(t)
*Export constraint
*TRX(t)
*Parameter constraint
*TCAP(t)
*CO2 produced per MWh
*phi(i)
*Carbon tax
*tau
*Ramp rate
*R(i)
;

*Reading the parameter data from csv files
$call csv2gdx Generator_Parameters.csv id=gp index=1 values=2..lastCol useHeader=y
$GDXIN Generator_Parameters.gdx
$Load i=Dim1
$Load ls=Dim2
$Load gp
$GDXIN

*Reading the parameter data from csv files
$call csv2gdx time_profile.csv id=tp index=1 values=2..lastCol useHeader=y
$GDXIN time_profile.gdx
$Load t=Dim1
$Load lp=Dim2
$Load tp
$GDXIN

*Reading the parameter data from csv files
$call csv2gdx constants.csv id=cp index=1 values=2..lastCol useHeader=y
$GDXIN constants.gdx
$Load j=Dim1
$Load cp
$GDXIN

Loop(i,
a(i)=(gp(i,'Cap')*cp('D')*(1+cp('D'))**cp('L'))/((1+cp('D'))**cp('L')-1)+ gp(i,'Fix')+gp(i,'OM')+gp(i,'Fuel');
d(i)=0;
);


*The amount of power generated by generator i in time t
Positive variable Q(t,i);
*The variable fuel cost associated with the genenrator
Positive variable fc(i);
*Power imported from external grid
Positive variable M(t);
*Power exported
Positive variable X(t);
*Capacity added or removed
variable  dC(i);
*Objective function
variable z;


Equations
objective Minimizing cost
demand(t)    Demand is met
flct(i) Fuel cost
*rampu(t,i)     Ramping up constraint
*rampd(t,i)     Ramping down constraint
capa(t,i)      Max capacity of the generator
imp(t)       Import constraint
exp(t)      Export constraint
flo(t)       Electricity flow in one direction
netzero   To ensure the design capapcity remains same
;

objective.. z=e=sum(t,tp(t,'Pt')*tp(t,'Dt')-sum(i,(gp(i,'OM')+gp(i,'Fuel')+ fc(i)+ cp('tau')*gp(i,'Carb')*Q(t,i))-(tp(t,'Pt')-cp('delta'))*M(t)+((tp(t,'Pt')-cp('delta'))*X(t)))-sum(i,(a(i)-d(i))*dC(i)));
flct(i)..      fc(i)=e=    sum(t,gp(i,'a') +gp(i,'b')*Q(t,i)+gp(i,'c')*Q(t,i)*Q(t,i));
demand(t)..    tp(t,'Dt')=l=sum(i,Q(t,i))+M(t)-X(t) ;
*rampu(t,i)..     Q(t,i)-Q(t-1,i)=l=gp(i,'Ci')*gp(i,'Ri')*.01;
*rampd(t,i)..     Q(t,i)-Q(t-1,i)=g=-gp(i,'Ci')*gp(i,'Ri')*.01;
capa(t,i)..      Q(t,i)=l=gp(i,'Ci')+dC(i);
imp(t)..       M(t)=l=tp(t,'TCAP');
exp(t)..       X(t)=l=tp(t,'TCAP');
flo(t)..      X(t)+M(t)=l=tp(t,'TCAP');
netzero..     sum(i,dC(i))=e=0;


Model optim /all/;
option minlp=baron,resLIM=4000,optCR=.1,decimals=6;
Solve optim using minlp maximizing z;
Display gp,a,Q.l,dC.l,X.l,M.l,z.l,fc.l;

File output /results.csv/;
*output.nr = 2  ;
output.nd = 1 ;
*output.nw = 0  ;
put output;
output.pc=5;
put output 'Generation source','Change in capacity (MW)'/;
loop(i, put i.tl,dC.l(i)/);
