package uk.ac.cam.ceb.como.paper.enthalpy.data.preprocessing;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.junit.Test;

import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.reaction.Reaction;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.species.Species;
import uk.ac.cam.ceb.como.paper.enthalpy.io.LoadSolver;
import uk.ac.cam.ceb.como.paper.enthalpy.io.LoadSpecies;
import uk.ac.cam.ceb.como.paper.enthalpy.reduction.list_calculator.ErrorBarCalculation;
import uk.ac.cam.ceb.paper.sort.Sort;

public class DataPreProcessingTestTitaniumSpecies {

	/**
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * Folder contains Gaussian files for Ti-based species that are reference species used in EBR pre-processing step of cross validation.
	 */
	static String srcCompoundsRef = "test_data/Gaussian/g09/";
	
	/**
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * The csv file for Ti-based target species that are used in EBR pre-processing step of cross validation.
	 */
	
	static String srcRefPool = "test_data/csv/ref_scaled_kJperMols_v8.csv";
	
	/**
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * Destination folders that store results generated by pre-processing module (Java code) of cross validation Java code. It includes ISG and ISD reaction types generated by Java code.
	 */
	static String destRList_isg = "test_data/test_results/hco_isg/";
	
	static String destRList_isd = "test_data/test_results/hco_isd/";
	
	/**
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * Folder that contains files used by GLPK solver.
	 */
	static String tempFolder = "test_data/LeaveOneOutCrossValidation_temp/";
//	static String tempFolder = "D:/Data-Philip/LeaveOneOutCrossValidation_temp/";
	
	
	/**
	 * 
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * Number of runs.
	 * 
	 */
	
	static int[] ctrRuns = new int[] {1};

	/**
	 * 
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * Number of reactions that will be generated for each species.
	 * 
	 */
	
	static int[] ctrRes = new int[] {1}; // 1, 5, 15, 25 //25,50 // 1,2,3,4,5,6,7,8,9,10  //5

	/**
	 * 
	 * @author nk510 (caresssd@hermes.cam.ac.uk)
	 * Number of radicals.
	 * 
	 */
	
	static int[] ctrRadicals = new int[] {0}; // 0, 1, 2, 3, 4, 5 //100

	
	/**
	 * 
	 * @author nk510 (caresssd@hermes.cam.ac.uk) Junit test that generates ISG type
	 *         of EBR reactions for selected species and estimates enthalpy
	 *         of formation for each reaction.
	 * 
	 * To run this Junit test please go to uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.solver.glpkTerminalGLPKSolver, and uncomment "map.put("glpsol", System.getProperty("user.dir") + "/glpk/w32/glpsol"); " (line 75) in order to allow test on Windows machine.
	 */
	

	
	@Test
	public void getDataPreProcessingISGReactionTest() throws Exception {
		
		 Map<String, Integer[]> mapElPairing = new HashMap<>();

		Map<Species, Integer> spinMultiplicity = new HashMap<>();

        LinkedHashSet<Species> validSpecies = new LinkedHashSet<Species>();
		
        LinkedHashSet<Species> invalidSpecies = new LinkedHashSet<Species>();

		Map<Reaction, Double> validReaction = new HashMap<Reaction, Double>();

		Map<Reaction, Double> invalidReaction = new HashMap<Reaction, Double>();

		Map<Species, Double> invalidSpeciesErrorBar = new HashMap<Species, Double>();

		
		   JSONArray listOfJsonSpeciesData = new JSONArray();
		    
		    JSONObject speciesJsonObject = new JSONObject();
		    
			BufferedWriter printedResultsTxtFile = new BufferedWriter(new FileWriter(destRList_isg+"/" + "printed_results" + ".txt", true));
			
			    /**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * The start current time in milliseconds.
				 *  
				 * */		


			LoadSpecies ls = new LoadSpecies();

			List<Species> refSpecies = ls.loadSpeciesProperties(ls.loadReferenceSpeciesFiles(srcRefPool), spinMultiplicity,srcCompoundsRef, mapElPairing, printedResultsTxtFile);

			System.out.println("refSpecies.isEmpty() before solver (main method): " + refSpecies.isEmpty());
			
			printedResultsTxtFile.write("refSpecies.isEmpty() before solver (main method): " + refSpecies.isEmpty());
			
			printedResultsTxtFile.write("\n");
			
			LoadSolver lSolver = new LoadSolver();

			DataPreProcessing dpp = new DataPreProcessing();

			ErrorBarCalculation errorBarCalculation = new ErrorBarCalculation();

		    System.out.println("- - - - - - - - - - - - - - - - Pre-processing step - - - - - - - - - - - - - - - -");
		    
			printedResultsTxtFile.write("- - - - - - - - - - - - - - - - Pre-processing step - - - - - - - - - - - - - - - -");
			
			printedResultsTxtFile.write("\n");
			
				/**
				 * 
				 * Data pre-processing step in cross validation algorithm. Determine the error
				 * metrics for reactions and species. Recommends a list of rejected species and the list of valid species.
				 * 
				 */
		    
//			ISGReactionType isgReactionType = new ISGReactionType(true);
			
			dpp.getPreProcessingCorssValidation(1500, 20, destRList_isg, ctrRadicals, ctrRuns, ctrRes, refSpecies,
						spinMultiplicity, lSolver.loadLPSolver(mapElPairing, 15000, tempFolder), validSpecies, invalidSpecies,
						validReaction, invalidReaction,printedResultsTxtFile); 

				/**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * After completing pre-processing step, it prints valid reactions in txt file and on console.
				 * 
				 */
			
//			BufferedWriter validReactionFile = new BufferedWriter(new FileWriter(destRList + "data-pre-processing" + "\\"+ "valid_reactions" + ".txt", true));

			/**
			 * 
			 * @author nk510 (caresssd@hermes.cam.ac.uk)
			 * HPC settings
			 * 
			 */
			
			BufferedWriter validReactionFile = new BufferedWriter(new FileWriter(destRList_isg + "/" +"data-pre-processing" + "/"+ "valid_reactions" + ".txt", true));

			System.out.println("Valid reactions writing . . . ");
			
			printedResultsTxtFile.write("Valid reactions writing . . . ");
			printedResultsTxtFile.write("\n");
			
			errorBarCalculation.generateInitialReactionListFile(validReactionFile, printedResultsTxtFile,validReaction);

				/**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * Printing invalid reactions in txt file and on console.
				 * 
				 */
			
			BufferedWriter invalidReactionFile = new BufferedWriter(
			
		//  new FileWriter(destRList + "data-pre-processing" + "\\"+ "invalid_reactions" + ".txt", true));
		    
			/**
			 * 
			 * @author nk510 (caresssd@hermes.cam.ac.uk)
			 * HPC settings
			 * 
			 */

			new FileWriter(destRList_isg + "/" +"data-pre-processing" + "/"+ "invalid_reactions" + ".txt", true));

			System.out.println("Invalid reactions writing . . .");
			
			printedResultsTxtFile.write("Invalid reactions writing . . .");
			printedResultsTxtFile.write("\n");
			
			errorBarCalculation.generateInitialReactionListFile(invalidReactionFile, printedResultsTxtFile,invalidReaction);

				/**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * Printing valid species in txt file and on console.
				 * 
				 */
			
			System.out.println("Valid species writing . . . ");
			
			printedResultsTxtFile.write("Valid species writing . . . ");
			printedResultsTxtFile.write("\n");
			
			BufferedWriter validSpeciesFile = new BufferedWriter(
			
//			new FileWriter(destRList + "data-pre-processing" + "\\"+ "valid_species" + ".txt", true));
			
			/**
			 * 
			 * @author nk510 (caresssd@hermes.cam.ac.uk)
			 * HPC settings
			 * 
			 */
			new FileWriter(destRList_isg + "/"+"data-pre-processing" + "/"+ "valid_species" + ".txt", true));

			/**
			 * 
			 * @author NK510 (caresssd@hermes.cam.ac.uk)
			 * Saves initial valid species into json format. This initial valid species is generated in pre-processing step of cross validation algorithm.
			 *   
			 */
			BufferedWriter printedJsonFileInitialValidSpecies = new BufferedWriter(new FileWriter(destRList_isg+"/" +"data-pre-processing" + "/"+ "printed_initial_valid_species" +".json", true));
			
			errorBarCalculation.generateInitialValidSpeciesFile(validSpeciesFile, printedResultsTxtFile,printedJsonFileInitialValidSpecies,validSpecies);

				/**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * Printing invalid species in txt file and on console.
				 * 
				 */
			
			System.out.println("Invalid species writing . . .");
			
			printedResultsTxtFile.write("Invalid species writing . . .");
			printedResultsTxtFile.write("\n");

			/**
			 * 
			 * @author nk510 (caresssd@hermes.cam.ac.uk)
			 * Settings on PC machine.
			 * 
			 */
//			BufferedWriter invalidSpeciesFile = new BufferedWriter(new FileWriter(destRList + "data-pre-processing" + "\\"+ "invalid_species" + ".txt", true));
			
			/**
			 * 
			 * @author nk510 (caresssd@hermes.cam.ac.uk)
			 * HPC settings
			 * 
			 */
			
			BufferedWriter invalidSpeciesFile = new BufferedWriter(new FileWriter(destRList_isg +"/" + "data-pre-processing" + "/"+ "invalid_species" + ".txt", true));

			/**
			 * 
			 * @author NK510 (caresssd@hermes.cam.ac.uk)
			 * Saves initial invalid species into json format. This initial invalid species is generated in pre-processing step of cross validation algorithm.
			 *   
			 */
			
			BufferedWriter printedJsonFileInitialInvalidSpecies = new BufferedWriter(new FileWriter(destRList_isg +"/" +"data-pre-processing" + "/"+ "printed_initial_invalid_species" +".json", true));
			
			errorBarCalculation.generateInitialInvalidSpeciesFile(invalidSpeciesFile, printedResultsTxtFile, printedJsonFileInitialInvalidSpecies,invalidSpecies, validSpecies);

				/**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * Error bar is average of all errors generated for each reaction of given
				 * species.
				 * 
				 * Calculates error bar for each species in invalid set of species.
				 * 
				 */

			invalidSpeciesErrorBar.putAll(errorBarCalculation.calculateSpeciesErrorBar(invalidReaction, validSpecies, invalidSpecies,printedResultsTxtFile));

				/**
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * Sorted hash map in decreasing order comparing by error bar value in Java 1.8.
				 * 
				 */
				
				Map<Species, Double> sortedInvalidSpeciesErrorBar = Sort.sortingSpeciesMapComparingByValue(invalidSpeciesErrorBar);

				System.out.println("Sorted species compared by error bars:");
				
				printedResultsTxtFile.write("Sorted species compared by error bars:");
				printedResultsTxtFile.write("\n");

				for (Map.Entry<Species, Double> ss : sortedInvalidSpeciesErrorBar.entrySet()) {

				System.out.println(ss.getKey().getRef() + " " +  ss.getValue());

				printedResultsTxtFile.write(ss.getKey().getRef() + " " +  ss.getValue());
				
				printedResultsTxtFile.write("\n");
				
				}
				
				printedResultsTxtFile.close();
				
				/**
				 * 
				 * @author nk510 (caresssd@hermes.cam.ac.uk)
				 * Terminates program
				 * 
				 */
			
			     System.exit(0);
	}
	
	/**
	 * 
	 * @author nk510 (caresssd@hermes.cam.ac.uk) Junit test that generates ISD type
	 *         of EBR reactions for selected species and estimates enthalpy
	 *         of formation for each reaction.
	 * 
	 */
//	@Test
	public void getDataPreProcessingISDReactionTest() {
		
		

	}
	

}