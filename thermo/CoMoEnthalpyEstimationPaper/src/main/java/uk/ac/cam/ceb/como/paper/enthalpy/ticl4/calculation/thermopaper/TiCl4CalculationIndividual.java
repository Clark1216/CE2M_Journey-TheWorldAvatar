/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.cam.ceb.como.paper.enthalpy.ticl4.calculation.thermopaper;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import com.google.common.collect.Multiset;

import uk.ac.cam.ceb.como.chem.periodictable.Element;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.io.pool.SpeciesPoolParser;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.io.pool.SpeciesPoolWriter;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.io.reactions.ReactionListWriter;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.reaction.Reaction;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.reaction.ReactionList;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.reaction.selector.MedianReactionSelector;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.reaction.selector.ReactionSelector;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.solver.LPSolver;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.solver.SolverHelper;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.solver.glpk.MPSFormat;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.solver.glpk.TerminalGLPKSolver;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.solver.reactiontype.ISGReactionType;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.species.Species;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.wrapper.singlecore.MultiRunCalculator;
import uk.ac.cam.ceb.como.enthalpy.estimation.balanced_reaction.wrapper.singlecore.PoolModificationCalculator;
import uk.ac.cam.ceb.como.paper.enthalpy.threading.EnthalpyEstimationThread;
import uk.ac.cam.ceb.como.paper.enthalpy.utils.EvaluationUtils;
import uk.ac.cam.ceb.como.paper.enthalpy.utils.HfSpeciesConverter;
import uk.ac.cam.ceb.como.tools.file.writer.StringWriter;

/**
 *
 * @author pb556
 * 
 * @author nk510 ( caresssd@hermes.cam.ac.uk )
 * @author am2145( am2145@cam.ac.uk )
 * 
 * This code does initialization analysis for one species (one loop only) that has max error bar among all species in the set of invalid species.
 * - In this inputs are:
 *    - A set of Ti-based species (Gaussian files) given as reference list of valid species previously generated by using pre- processing step.
 *    - A list of one target species  (only one species) for which enthalpy is not given and that has the highest error bar among all rejected species. This list is given as csv file.
 *    - Number of runs is set to one, and number of allowed reactions is set to 5.
 *    - ISG reaction type
 * - Calculates EBR for target (one) species  and estimates enthalpy for each reaction
 * - Calculates error bar by using all calculated errors for each reactions. For this test case we generate five reactions.
 * 
 */

public class TiCl4CalculationIndividual {

    public static void main(String[] args) throws Exception {

        // USED!!!
        
//      String srcCompoundsRef = "W:\\projects\\TiCl4_thermo\\thermo-calculations\\final-calculations-publication-used\\esc\\combined\\g09\\";
//      String srcRefPool = "W:\\projects\\TiCl4_thermo\\thermo-calculations\\enthalpy\\reference\\plain-ref_scaled_kJperMols_v8-0p05.csv";
//      String srcSoiPool = "W:\\projects\\TiCl4_thermo\\thermo-calculations\\enthalpy\\ti-o-cl-species\\calc-enthalpy_scaled_kJperMol.csv";
//      String destRList = "W:\\projects\\TiCl4_thermo\\thermo-calculations\\enthalpy\\publication-validation\\results\\isg\\";

//      String srcCompoundsRef = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\TiCl4\\g09\\";
//      String srcRefPool = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\TiCl4\\plain-ref_scaled_kJperMols_v8-0p05.csv"; //reference data
//      String srcSoiPool = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\TiCl4\\calc-enthalpy_scaled_kJperMol-test-O2-3let.csv";  // target species calc-enthalpy_scaled_kJperMol-test-O2-3let calc-enthalpy_scaled_kJperMol-test
//      String destRList = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\TiCl4\\isg\\";
        
        String srcCompoundsRef = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\g09\\";
        String srcRefPool = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\ref_scaled_kJperMols_v8-valid.csv"; //reference data
        String srcSoiPool = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\ref_scaled_kJperMols_v8-one-species.csv";  // target species calc-enthalpy_scaled_kJperMol-test-O2-3let calc-enthalpy_scaled_kJperMol-test
        String destRList = "C:\\Users\\NK\\Documents\\philipp\\180-pb556\\ti_isg\\";

        Map<String, Integer[]> mapElPairing = new HashMap<>();

        SpeciesPoolParser refParser = new SpeciesPoolParser(new File(srcRefPool));
        
        refParser.parse();
        
        List<Species> refSpecies = new ArrayList<>(refParser.getRefSpecies());

        for(Species r: refSpecies) {
        
        System.out.println("species ref name: " + r.getRef() + " species ref  enthalpy: "  + r.getHf());
        
        }
        
        SpeciesPoolParser soiParser = new SpeciesPoolParser(new File(srcSoiPool));
        
        soiParser.parse();
        
        Set<Species> soiSetOfSpecies = soiParser.getAllSpecies();
        
        for(Species s: soiSetOfSpecies) {
        	
        	System.out.println("Soi species name: " + s.getRef() + " soi ref enthalpy: " + s.getHf());
        	
        	System.out.println("Atom map: " + s.getAtomMap().toString());
        	
        	Multiset<Element> element = s.getAtomMultiset();
        	
        	for(Element e: element) {        		
        		
        		System.out.println("Atomic number: " + e.getAtomicNumber() + ", weight: " + e.getAtomicWeight() + " group" + e.getGroup() + " mass number:  " + e.getMassNumber() + " name" + e.getName() +  " n. of neutrons : " + e.getNumberOfNeutrons());
        		System.out.println("Num. of paired electrons: " + e.getNumberOfPairedElectrons() + " num. of unpaired electrons: " + e.getNumberOfUnpairedElectrons()+ " period: " + e.getPeriod()+ " symbol: " + e.getSymbol() + " block: " + e.getBlock());
        		System.out.println("Electron configuration :" + e.getElectronConfiguration() + " | Element Category: " + e.getElementCategory() + " | Physical properties: " + e.getPhysicalProperties());
        }
        
       	System.out.println("Bond Type Multiset: " + s.getBondTypeMultiset().toString());
       	
        }
        
        List<Species> soiSpecies = new ArrayList<>(soiParser.getSpeciesOfInterest());

        for(Species s: soiSpecies) {
        	
        	System.out.println("soiSpecies:  " + s.getRef() + " , Hf: "  + s.getHf() + " ,  total energy: " + s.getTotalEnergy() + " , bond type multiset: " + s.getBondTypeMultiset() + " , atom map: " + s.getAtomMap());
        }
        
        Collection<Species> invalids = new HashSet<>();
        
        Map<Species, Integer> spinMultiplicity = new HashMap<>();
        
        int ctr = 1;

        Set<Species> all = new HashSet<>();
        
        all.addAll(soiSpecies);
        all.addAll(refSpecies);

        for (Species s : refSpecies) {
        	
            System.out.println("REF: Processing " + ctr + " / " + refSpecies.size());
            ctr++;
            
            File f = new File(srcCompoundsRef + s.getRef().replace(".g09", "") + ".g09");
            
            if (f.exists()) {
            
            	System.out.print(f.getName() + ": ");
                
            	try {
            		
                    Integer[] e = HfSpeciesConverter.getNumberOfElectrons(HfSpeciesConverter.parse(f));
                    
                    if (e != null) {
                    	
                        spinMultiplicity.put(s, e[1] + 1);
                        mapElPairing.put(s.getRef(), e);
                        
                    } else {
                        
                    	System.out.println("REF: e- pairing could not be determined for " + s.getRef());
                        invalids.add(s);
                    }
                    
                } catch (NullPointerException npe) {
                	
                    if (s.getRef().compareTo("Ti5O6Cl8") == 0) {
                    	
                        spinMultiplicity.put(s, 1);
                        
                    } else {
                    	
                        System.out.println(s.getRef());
                    }
                }
            } else {
            	
                System.out.println("REF: No file found for " + s.getRef());
                
                invalids.add(s);
            }
        }
        
        refSpecies.removeAll(invalids);
        all.removeAll(invalids);
        soiSpecies.removeAll(invalids);

        SolverHelper.add(mapElPairing);
/**
 *  - - - -  - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 */
        int[] ctrRuns = new int[]{1}; // 3,4, 6,
        int[] ctrRes = new int[]{5}; // 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18, //previous list: 11, 12, 13, 14, 15, 16, 17, 18, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40
        int[] ctrRadicals = new int[]{100}; // 0, 1, 2, 3, 4, 5

        for (int z = 0; z < ctrRadicals.length; z++) {
            int maxRadical = ctrRadicals[z];
            int timeout = 1500;//1500;
            
            for (int i = 0; i < ctrRuns.length; i++) {
            
            	for (int k = 0; k < ctrRes.length; k++) {
                	
//                  int timeout = 60 * ctrRes[k];
                    String config = "isg_runs" + ctrRuns[i] + "_res" + ctrRes[k] + "_radicals" + maxRadical + "_" + timeout + "s";
                
                    System.out.println("Process configuration " + config);

                    if (new File(destRList + "\\" + config + ".txt").exists()) {
                    
                    	System.out.println("Skipping " + destRList + "\\" + config);
                        
                    	continue;
                    	
                    }
                    
                    Collections.shuffle(refSpecies);
                    Collections.shuffle(soiSpecies);
                    ctr = 1;
                    
                    for (Species target : soiSpecies) {
                        
                        LPSolver solver = new TerminalGLPKSolver(15000, false, true);
                        
//                      new File("C:\\Users\\pb556\\temp9\\" + target.getRef().replace(".g09", "") + "\\.temp\\").mkdirs();
                        
                        new File("D:\\Data-Philip\\LeaveOneOutCrossValidation_temp\\" + target.getRef().replace(".g09", "") + "\\.temp\\").mkdirs();

//                      solver.setDirectory(new File("C:\\Users\\pb556\\temp9\\" + target.getRef().replace(".g09", "") + "\\"));
                        
                        solver.setDirectory(new File("D:\\Data-Philip\\LeaveOneOutCrossValidation_temp\\" + target.getRef().replace(".g09", "") + "\\"));

//                        System.out.println("REF: Processing " + ctr + " / " + all.size());
//                        ctr++;
                        
                        File f = new File(srcCompoundsRef + target.getRef().replace(".g09", "") + ".g09");
                        
                        if (f.exists()) {
                        	
                            System.out.print(f.getName() + ": ");
                            
                            try {
                            	
                                Integer[] e = HfSpeciesConverter.getNumberOfElectrons(HfSpeciesConverter.parse(f));
                                
                                
                                if (e != null) {
                                	
                                    spinMultiplicity.put(target, e[1] + 1);
                                    
                                    mapElPairing.put(target.getRef(), e);
                                    
                                } else {
                                	
                                    System.out.println("REF: e- pairing could not be determined for " + target.getRef());
                                    invalids.add(target);
                                    continue;
                                }
                                
                            } catch (NullPointerException npe) {
                            	
                                if (target.getRef().compareTo("Ti5O6Cl8") == 0) {
                                	
                                    spinMultiplicity.put(target, 1);
                                    
                                } else {
                                	
                                    System.out.println(target.getRef());
                                }
                            }
                            
                        } else {
                        	
                            System.out.println("REF: No file found for " + target.getRef());
                            invalids.add(target);
                            continue;
                        }

                        refSpecies.removeAll(invalids);
                        all.removeAll(invalids);
                        soiSpecies.removeAll(invalids);

                        SolverHelper.add(mapElPairing);

                        Map<Species, Collection<ReactionList>> results = new HashMap<>();
                        System.out.println("Estimating dHf(298.15K) for species " + target.getRef() + " (" + ctr + " / " + soiSpecies.size() + ")");
                        ctr++;

                        if (new File(destRList + "\\" + target.getRef() + "\\" + config + "_reaction-list.rct").exists()) {
                        	
                            continue;
                            
                        }

                        List<Species> refPool = new ArrayList<>();
                        
                        refPool.addAll(refSpecies);
                        refPool.remove(target);
                        
                        
                        
                        // filter for radicals
                        for (Species sSpin : spinMultiplicity.keySet()) {
                        
                        	try {
                        		
                                if (spinMultiplicity.get(sSpin) != null && spinMultiplicity.get(sSpin) - 1 > maxRadical) {
                                    refPool.remove(sSpin);
                                }
                            } catch (NullPointerException ex) {
                            }
                        }
                        
                        Collections.shuffle(refPool);
                        ExecutorService executor = Executors.newSingleThreadExecutor();
                        
                        PoolModificationCalculator poolModCalc = new PoolModificationCalculator(ctrRes[k], solver, new MPSFormat(false, new ISGReactionType(true)));
                        poolModCalc.setMaximumSearchDepth(50);
                        
                        MultiRunCalculator c = new MultiRunCalculator(poolModCalc);
                        c.setNumberOfRuns(ctrRuns[i]);
                        
                        EnthalpyEstimationThread t = new EnthalpyEstimationThread(c, target, EvaluationUtils.getPool(refPool, true));
                        Future<Map<Species, Collection<ReactionList>>> future = executor.submit(t);
                        
                        try {
                            try {
                                Map<Species, Collection<ReactionList>> r = (Map<Species, Collection<ReactionList>>) future.get(timeout, TimeUnit.SECONDS);
                                if (r != null) {
                                    for (Species sR : r.keySet()) {
                                        results.put(target, r.get(sR));
                                    }
                                } else {
                                    r = (Map<Species, Collection<ReactionList>>) t.getCalculator().get();
                                    if (r != null) {
                                        for (Species sR : r.keySet()) {
                                            results.put(target, r.get(sR));
                                        }
                                    } else {
                                        results.put(target, null);
                                    }
                                }
                            } catch (TimeoutException | InterruptedException | ExecutionException e) {
                                System.out.println("Terminated!");
                                Map<Species, Collection<ReactionList>> re = (Map<Species, Collection<ReactionList>>) t.getCalculator().get();
                                if (re != null) {
                                    for (Species sR : re.keySet()) {
                                        results.put(target, re.get(sR));
                                    }
                                } else {
                                    results.put(target, null);
                                }
                            }

                            ReactionList completeRList = new ReactionList();
                            Collection<Species> ttipSpecies = new HashSet<>();
                            
                            for (Species s : results.keySet()) {
                                
                            	try {
                                    
                                	ReactionList rList = new ReactionList();
                                    
                                    for (ReactionList l : results.get(s)) {
                                        rList.addAll(l);
                                    }
                                    
                                    System.out.println("rList:");
                                    
                                    for(Reaction r : rList) {
                                    	  
                                    	  System.out.println("Species name : " + r.getSpecies().getRef()+ " enthalpy: " + r.getSpecies().getHf());
                                      }

                                    
                                    completeRList.addAll(rList);
                                    
                                    ReactionSelector selector = new MedianReactionSelector();
                                    
                                    List<Reaction> reactionList = selector.select(rList);
                                    
                                    System.out.println("reactionList.size(): " + reactionList.size());
                                    
                                    for(Reaction r : reactionList) {
                                  	  
                                  	  System.out.println("Species name : " + r.getSpecies().getRef()+ " enthalpy: " + r.getSpecies().getHf());
                                    }
                                    
                                    Reaction r = selector.select(rList).get(0);
                                    
                                    s.setHf(r.calculateHf());
                                    
                                    ttipSpecies.add(s);
                                
                            	} catch (ArrayIndexOutOfBoundsException | NullPointerException aioobe) {
                                    System.out.println("No data were calculated for " + s.getRef());
                                }
                            }

                            if (!new File(destRList + "\\" + target.getRef() + "\\").exists()) {
                                new File(destRList + "\\" + target.getRef() + "\\").mkdirs();
                            }

                            ReactionListWriter rListWriter = new ReactionListWriter(new File(destRList + "\\" + target.getRef() + "\\" + config + "_reaction-list.rct"));
                            SpeciesPoolWriter spWriter = new SpeciesPoolWriter(new File(destRList + "\\" + target.getRef() + "\\" + config + "_species-pool_median.csv"));

                            if (!completeRList.isEmpty()) {
                                System.out.println("Writting complete reaction list...");
                                rListWriter.set(completeRList);
                                rListWriter.overwrite(true);
                                rListWriter.write();
                                
                                /**
                                 * sets reference enthalpy for target species
                                 */
                                for(Species r: refSpecies) {
                                	
                                	if(r.getRef().equals(target.getRef())) {
                                		
                                		target.setHf(r.getHf());
                                		
                                	}
                                }
                                
                                double errorSum = 0.0;
                                /**
                                 * Number of reaction to be used as a error count in calculating error bar.
                                 */
                                int errorCount=completeRList.size();
                                
                           	    double errorBar = 0.0;
                           	 
                                for(int ri=0; ri<completeRList.size();ri++) {
                                    
//                              double error = Math.abs(completeRList.get(ri).getSpecies().getHf()-completeRList.get(ri).calculateHf());
                                	
                                double error = Math.abs(target.getHf()-completeRList.get(ri).calculateHf());
                                
                                System.out.println("target species name: " + target.getRef() + " ,  target ref enthalpy: " +  target.getHf());
                                
                            	System.out.println( " Reaction("+ri+"): " + completeRList.get(ri).toString() + " Species (target ref) enthalpy: " + target.getHf() + " Calculated Hf for reaction("+ri+"): " + completeRList.get(ri).calculateHf() + " error: " + error);
                                
                            	errorSum = errorSum + error;
                            	
                                }
                                
                                errorBar=errorSum/errorCount;
                                
                                System.out.println("species name: " + target.getRef() + " error bar: " + errorBar);

                            }

                            if (!ttipSpecies.isEmpty()) {
                                System.out.println("Writting species list...");
                                spWriter.set(ttipSpecies, false);
                                spWriter.write();
                                
                                System.out.println("TTIP Species: ");
                                
                                for(Species ttip: ttipSpecies) {
                                	
                                	System.out.println(ttip.getRef()+ " " + ttip.getHf());
                                }
                            }
                        } catch (OutOfMemoryError e) {
                            System.gc();
                        }
                    }

                    try {
                        StringWriter writer = new StringWriter();
                        writer.setContent("completed!");
                        writer.overwrite(true);
                        writer.set(destRList + "\\" + config + ".txt");
                        writer.write();
                    } catch (Exception e) {
                    }
                }
            }
        }// for (int z = 0; z < ctrRadicals.length; z++)
    }
}
