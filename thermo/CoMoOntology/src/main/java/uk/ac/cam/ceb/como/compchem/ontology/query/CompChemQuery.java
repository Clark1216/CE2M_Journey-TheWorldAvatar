package uk.ac.cam.ceb.como.compchem.ontology.query;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntModelSpec;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFormatter;

import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.util.FileManager;



/**
 * 
 * @author <p>nk510 This code queries one rdf file (TiCl4.rdf) generated by using XSLT transformations. Rdf
 *         files are Abox of Compchem ontology, and stored in 'compchem_abox'
 *         folder. To query it, we use Jena api. Java code searches all sparql
 *         queries saved in folder 'sparql_query', runs it and results of these
 *         queries are saved in 'sparql_results' folder by using json format.</p>
 */

public class CompChemQuery {

	static FileOutputStream fileOutputStream = null;
	
	public static final String TBOX_SOURCE = "./src/test/resources/ontology/compchem_ontology/compchem.spin.rdf";
	public static final String ABOX_SOURCE = "./src/test/resources/ontology/compchem_abox/TiCl4.rdf";

	public static void main(String[] args) throws IOException {
		
		File[] sparqlFileList = getSPARQLFileList("src/test/resources/ontology/sparql_query/");

		OntModel model = getOntModel(TBOX_SOURCE, ABOX_SOURCE);

		for (File f : sparqlFileList) {
			
			String q = FileUtils.readFileToString(f);
			
			performQuery(model, q, f.getName());
			
		}
	}
	
	/**
	 * 
	 * @param tboxSource
	 * @param aboxSource
	 * @return
	 */

	public static OntModel getOntModel(String tboxSource, String aboxSource) {

		OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM_TRANS_INF);

		FileManager.get().readModel(model, aboxSource);
		FileManager.get().readModel(model, tboxSource);

		return model;

	}

	/**
	 * 
	 * @param model
	 * @param queryString
	 * @param fileName
	 * @throws IOException
	 */
	
	public static void performQuery(OntModel model, String queryString, String fileName) throws IOException {
		
		Query query = QueryFactory.create(queryString);

		QueryExecution qexec = QueryExecutionFactory.create(query, model);
		
		try {
			
			ResultSet resultSet = qexec.execSelect();
			
			File sparqlResults = new File("src/test/resources/ontology/sparql_results/"+ fileName +".json");
			
			fileOutputStream = new FileOutputStream(sparqlResults);

			ResultSetFormatter.outputAsJSON(fileOutputStream, resultSet);

		}finally {
			
			qexec.close();
		}
	}
	
	/**
	 * @author nk510
	 * @param folderPath
	 * @return
	 * 
	 */
	public static File[] getSPARQLFileList(String folderPath) {

		File dir = new File(folderPath);
		
		File[] fileList = dir.listFiles(new FilenameFilter(){
			
			public boolean accept(File dir, String name) {
				
			return (name.endsWith(".sparql"));
			
			}

		});

		return fileList;
		
	}
	
}