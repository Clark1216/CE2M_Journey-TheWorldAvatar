/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.cam.ceb.como.thermo.converter.nasa7;

import uk.ac.cam.ceb.como.chem.structure.Compound;
import uk.ac.cam.ceb.como.chem.structure.util.ModelUtils;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.log4j.Logger;
import uk.ac.cam.ceb.como.chem.periodictable.Element;
import uk.ac.cam.ceb.como.chem.structure.Atom;
import uk.ac.cam.ceb.como.thermo.calculator.StatMechThermoCalculator;
import uk.ac.cam.ceb.como.thermo.converter.nasa7.format.file.NASA7Format;
import uk.ac.cam.ceb.como.chem.structure.util.CompoundConverter;

/**
 * @author nk510
 */

/*
 * comment added 04th-April-2018
 *  import uk.ac.cam.ceb.como.descriptor.molecular.CompoundDescriptionBuilderIntf; 
 */

/**
 *
 * @author pb556
 * 
 * additional information was formated wrong
 * added duplicate check
 */
public class NASAConverter {

    private Logger logger = Logger.getLogger(getClass().getName());
    // Must not reset
    private final String newLine = System.getProperty("line.separator");
    private Map<String, Compound> compounds = null;
    // Must reset;
    private BufferedWriter out = null;
    private String header = "";
    private String footer = "";
    private String species = "";
    private String elements = "";
    private String body = "";
    private Set<Element> elementSet = new HashSet<Element>();
    

    /**
     * @author nk510
     */

    /*
     * comment added 04th-April-2018
     * private CompoundDescriptionBuilderIntf speciesNameGenerator = null;
     */
    

    
    protected StatMechThermoCalculator thermoCal;

    public NASAConverter(StatMechThermoCalculator thermoCal) {
        this.thermoCal = thermoCal;
    }

    /**
     * @author nk510
     */

/* comment added 04th-April-2018
 *     public void setSpeciesNameGenerator(CompoundDescriptionBuilderIntf spGen) {
        this.speciesNameGenerator = spGen;
    }
*/

    private void reset(String out_format) {
        out = null;
        elementSet.clear();
        String dateTime = DateFormatUtils.format(Calendar.getInstance(), "dd MMM yyyy 'at' HH:mm:ss (z)");
        if (out_format.equalsIgnoreCase("cantera")) {
            header = "# NASA Polynomials generated by NASAConverter Java Programme " + newLine
                    + "# Date : " + dateTime + newLine + newLine
                    + "units(length = \"cm\", time = \"s\", quantity = \"mol\", act_energy = \"cal/mol\")" + newLine + newLine
                    + "ideal_gas(name = \"gas\"," + newLine
                    + "elements = \"";
            elements = "";
            species = "\"," + newLine
                    + "species = \"\"\"" + newLine;
            body = "          \"\"\"," + newLine
                    + "    reactions = \"all\"," + newLine
                    + "    initial_state = state(temperature = 300.0, pressure = OneAtm)    )" + newLine + newLine
                    + "############# NASA 7-Coefficient Polynomials in Cantera Format #############" + newLine + newLine;
            footer = "############################### End of File ################################" + newLine;
        } else if (out_format.equalsIgnoreCase("chemkin")) {
            header = "!!!!!! NASA Polynomials Generated by pb556 Java Program !!!!!!" + newLine
                    + "!  --- Date : " + dateTime + " --- " + newLine + newLine
                    + "!ELEM" + newLine
                    + "!";
            elements = "";
            species = newLine + "!END" + newLine + newLine
                    + "!SPEC" + newLine;
            body = "!END" + newLine + newLine
                    + "THERMO" + newLine
                    + StringUtils.leftPad(NASA7Format.formatTemperature(20), 10)
                    + StringUtils.leftPad(NASA7Format.formatTemperature(1000), 10)
                    + StringUtils.leftPad(NASA7Format.formatTemperature(4000), 10) + newLine;
            footer = "END" + newLine;
        } else {
            throw new UnsupportedOperationException(out_format + " is not supported.");
        }
    }

    public void writeNASA(Map<String, Compound> compounds, String out_file, String out_format) {
        this.compounds = compounds;
        if ((!(out_format.equalsIgnoreCase("cantera")))
                && (!(out_format.equalsIgnoreCase("chemkin")))) {
            throw new UnsupportedOperationException(out_format + " is not supported.");
        }
        try {
            if (out != null) {
                out.close();
            }
            reset(out_format);
            out = new BufferedWriter(new FileWriter(out_file));
            int skip = 0;
            int success = 0;
            int warning = 0;
            ArrayList<String> addedSpStr = new ArrayList<String>();
            for (String id : compounds.keySet()) {
                Compound compound = compounds.get(id);

                try {
                    logger.info("Converting file : " + id);
                    thermoCal.setThermoAnalyzable(compound);
                    NASA7Format nasaf = new NASA7Format();

                    // Set file name.
                    String sp_str = compound.getEmpiricalFormula();
                    
                    /**
                     * @author nk510
                     */

/*                    comment added 04th-April-2018
 *                     if (speciesNameGenerator != null) {
                        sp_str = speciesNameGenerator.build(compound);
                       }
*/
                    if (addedSpStr.contains(sp_str)) {
                        boolean verify = true;
                        int ctr = 1;
                        while (verify) {
                            if (addedSpStr.contains(sp_str + "_" + ctr)) {
                                ctr++;
                            } else {
                                sp_str = sp_str + "_" + ctr;
                                verify = false;
                            }
                        }
                    }
                    addedSpStr.add(sp_str);

                    if (out_format.equalsIgnoreCase("cantera")) {
                        // make body first in case error.
                        //String nasa_str = nasaf.formatCantera(sp_str, thermoCal);
                        String nasa_str = nasaf.formatCantera(sp_str, thermoCal, 160, 600);
                        body += nasa_str + newLine;
                        species += "          " + sp_str + newLine;
                    } else if (out_format.equalsIgnoreCase("chemkin")) {
                        // make body
                        String nasa_str = nasaf.formatCHEMKIN(sp_str, thermoCal);
                        body += nasa_str + newLine;
                        species += "!" + sp_str + newLine;
                        if (nasa_str.startsWith("!Warning")) {
                            warning++;
                        }
                    }
                    
                    // make elements
                    List<Atom> cur_atom = CompoundConverter.getImplodedAtomListByElement(compound);
                    elementSet.addAll(ModelUtils.getElementList(cur_atom));
                } catch (Exception ex) {
                    logger.error("- Failed to read a file at " + id);
                    skip++;
                    if (out_format.equalsIgnoreCase("cantera")) {
                        writeLn("#Skipping invalid chem file : " + id);
                    } else if (out_format.equalsIgnoreCase("chemkin")) {
                        writeLn("!Skipping invalid chem file : " + id);
                    }
                    continue;
                }

                logger.info("Writting Polynomial for " + id);
                success++;
            }

            for (Iterator<Element> it = elementSet.iterator(); it.hasNext();) {
                Element element = it.next();
                elements += element.getSymbol() + " ";
            }
            String log = "NASA Polynomials : Total = " + compounds.size()
                    + ", Success = " + success
                    + ", Skipped = " + skip
                    + ", Warning = " + warning;

            logger.info(log);

            if (out_format.equalsIgnoreCase("cantera")) {
                log = "# " + log;
            } else if (out_format.equalsIgnoreCase("chemkin")) {
                log = "! " + log;
            }

            // Start writting to file.
            write(header);

            write(elements);

            write(species);

            write(body);

            writeLn(footer
                    + log);
        } catch (IOException ex) {
            logger.error("NASA error.", ex);
        } finally {
            IOUtils.closeQuietly(out);
        }
    }

    private void writeLn(String str) throws IOException {
        out.write(str);
        out.newLine();
        out.flush();
    }

    private void write(String str) throws IOException {
        out.write(str);
        out.flush();
    }
    
//    protected OBMol convertToOBMol(Compound jDoc) {
//        OBMol obmol = new OBMol();
//        Map<Atom, Integer> atomMap = new HashMap<Atom, Integer>(jDoc.getAtomCount());
//        for (int i = 0; i < jDoc.getAtomCount(); i++) {
//            OBAtom atom = new OBAtom();
//            atom.SetAtomicNum(jDoc.getAtom(i).getElement().atomicNumber);
//            atom.SetIdx(i + 1);
//            atom.SetVector(jDoc.getAtom(i).getXInA(), jDoc.getAtom(i).getYInA(), jDoc.getAtom(i).getZInA());
//            obmol.AddAtom(atom);
//            atomMap.put(jDoc.getAtom(i), i + 1);
//        }
//
//        for (int i = 0; i < jDoc.getBondCount(); i++) {
//            OBBond bond = new OBBond();
//            Bond mybond = jDoc.getBond(i);
//            OBAtom atomA = obmol.GetAtom(atomMap.get(mybond.getAtomA()));
//            OBAtom atomB = obmol.GetAtom(atomMap.get(mybond.getAtomB()));
//            bond.Set(i, atomA, atomB, BondType.convertToOBBondType(mybond.getBondType()), 0);
//            obmol.AddBond(bond);
//        }
//        return obmol;
//    }
}
