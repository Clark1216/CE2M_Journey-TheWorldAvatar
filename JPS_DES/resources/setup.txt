How to setup and test DES?
1) Install Metamask or set up your ethereum node. (Instructions below are for Metamask)
	a) Open your browser and look for Metamask Plugin. You can download it on Google or Firefox. I use firefox. 
	b) Once downloaded, log in. You can choose to create your own account, or import an account using the seedphrase. For the one in use, the seedphrase is "lunch also tomorrow broom ripple dentist orange label kitchen body mountain tired"
	c) It's a collection of 12 words that you need to enter. 
		i) The password for the above account is "Caesar1!". 
	d) Once you enter, look at the accounts that you have. You should have Residential, Commercial, Industrial, Solar, ElectricGrid. 
2) Check the values of your accounts: 
	a) Make sure that Residential, Commercial and Industrial have sufficient funds of above 10 ether. Best if you can have 200 ether per account, but currently, 10 ether is still safe. 
	b) If you do not have enough, one recommendation is to get more ether from the faucet. This could be done in the following manner: 
		i) Create a social media post on Twitter or Facebook containing the account's address. For example, the address for Residential is 0x1eD35d5845F8162B40df26c34562cFabd4892017
		ii) Once you have the post created, take the url of the specific post. Copy it (Ctrl C)
		iii) Go to this website: https://www.rinkeby.io/#faucet
		iv) On your browser, paste the URL that you have copied into the box. Select the frequency of ether that you can commit to. For example, I prefer to use 7.5 ether/day or 18.75 ether/3 days because I know that I can commit to that schedule. 
		v) Once you have selected your frequency, let go of the mouse. There should be a green load bar that finishes running. If there isn't, it's most likely because you haven't allocated enough time before it finishes. 
	c) Alternatively, you can deposit some of your ether that's been lying in solar or electricgrid's account. You can do it this way: 
		i) Select the plugin. You should see two buttons below the Ethereum Diamond icon: Send and Deposit. Click "Send"
		ii) Select the account that you want to send to. 
		iii) Select the button slow. Sending ether between accounts costs money, and the rinkeby network is fast enough that the "slow" action takes a pretty decent amount of time. 
		iv) Click Next, and Confirm your selection
	d) This method is preferable, but because of the consumption of ether of sending between accounts, there would come to a point when the ether runs out. 
3) Now you are ready to begin your tests!
4) The flow of the project is this: 
	a)Every hour, WeatherIrradiationRetriever would run and collect information via OCR. Test this method by running http://localhost:8080/GetIrradiationandWeatherData
		i) Input: Three IRI for irradiation, wind speed and temperature
		ii) Output: Three IRI
	b)Check in JPS_DATA/.../scenario/base for that folder. see if there's an error log. 

	c) The DES Coordination Agent has two subcomponents and can be found in DESCoordination.java. This is called periodically due to the 10 call per limit that forecasting solar data imposes on us. 
		i) Input: Contains the electrical network, and the district IRI
		ii) Output: A folder that has the predictions for the next twenty four hours of the a) residential, commercial, industrial, solar and electric grid profile and b) the profiles of three types of residential households. 
	d) DES Coordination calls on the Forecast Agent to check and print the next twenty four hours. It calls "/getForecastData"
	Forecast Agent takes in 
		i) Input: baseURL that dictates where the weather forecast files are written. 
		ii) Output: WeatherForecast.csv is written into the baseURL folder
	e) DESCoordination then calls upon DESAgent, the wrapper for the python code that uses Game Theory to model a simulation via /DESAgent
	DESAgent takes in
		i) Input: Electrical network IRI, District IRI, baseURL
		ii) Output: 
			1) Temperature: 24 values
			2) Irradiation: 24 values
			3) Five Graph profile that has
			i) Solar (24)
			ii) gridsupply (24)
			iii) Commercial (24)
			iv) industrial (24)
			v) residential (24)
			4) Three sets of residential type profiles
			i) Each set has 3 sets of profiles over 24 hours. 
		The sum total should take three minutes. 
	f) When executing, the FrontEnd Coordination is called. This is called from the nodeJS frontend, DESPlot.js (in public/javascripts) 
		i)Input: Nothing
		ii) Output: A JSON packet that has the predictions for the next twenty four hours of the a) residential, commercial, industrial, solar and electric grid profile and b) the profiles of three types of residential households. 
		as well as c) the transaction hashes and corresponding senders and receivers
	g) FrontEnd Coordination uses rdf4j to get the last complete run of DESCoordination. This is done by annotating the folder and keeping a record in runOptimization in DESAgent before querying it in FrontEndCoordination
	h) Due to the large size of the JSON packet, the  agent reduces it to a JSON size of five, with each key having just 1 value. 
	Then, it calls upon the BlockchainWrapper agent that communicates with the blockchain. 
		i) Input: A JSON of five elements. 
		ii) Output: JSON of two keys
			1) txHash, the list of transaction hashes. A transaction hash can be treated as a receipt. 
			2) sandr, the list of senders and receivers. 
	i) Coordination Agent can be tested by using "testStartCoordinationDESScenariobase()"
	k) Weather Agent (RealTime) can be collected via testIrradiationRetrieverDirectCall() and testIrradiationRetrieverAgentCall()
	l) forecastAgent can be tested along with Coordination. I would prefer not to test it unless it is strictly necessary due to the aforementioned calls, thus I have hid it with triple xses
	m) DES Agent can be tested along with DESAgent. Since DESAgent requires the necessary folders to be available, check to see if there was a successful run by running testStartDESScenariobaseshowingresult(). If there isn't, you'll need to see why it isn't running. Use testDESAgentAgentCall() to start running
	n) BlockchainWrapper can be tested via testBlockchainWrapperDirectCall and testBlockchainWrapperAgentCall. 
	
